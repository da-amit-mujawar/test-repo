drop table if exists {auto_tablename2};

--Deleting duplicate VIN nos.  ticket.#212641
Select VIN, MAX(ID) as ID
INTO {auto_tablename2}
   from {auto_tablename4}
Group by VIN;

--Delete the dups
DELETE
from  {auto_tablename4}
where ID NOT IN (Select ID from {auto_tablename2});

DROP TABLE IF EXISTS {auto_tablename2};

DROP TABLE IF EXISTS {auto_tablename1};
create table {auto_tablename1}
(
vin varchar(17) ENCODE zstd,
shortvin varchar(10) ENCODE zstd,
firstname varchar(30) ENCODE zstd,
MIDDLE_INITIAL varchar(1) ENCODE zstd,
lastname varchar(30) ENCODE zstd,
gender varchar(1) ENCODE zstd,
make varchar(30) ENCODE zstd,
model varchar(30) ENCODE zstd,
year varchar(4) ENCODE zstd,
odometer varchar(6) ENCODE zstd,
transaction_date varchar(8) ENCODE zstd,
transyyyymm varchar(6) ENCODE bytedict,
drive_type varchar(3) ENCODE zstd,
fuel_type varchar(1) ENCODE zstd,
luxnon varchar(1) ENCODE zstd,
bodytype varchar(15) ENCODE zstd,
domimp varchar(1) ENCODE zstd,
vehtype varchar(5) ENCODE zstd,
transyear varchar(4) ENCODE zstd,
vehrecno varchar(20) ENCODE zstd,
lems varchar(18) ENCODE zstd,
CE_Household_ID varchar(12) ENCODE zstd,
CE_Selected_Individual_ID varchar(12) ENCODE zstd,
SQLMC varchar(25) ENCODE zstd,
AddressLine1 varchar(40) ENCODE zstd,
AddressLine2 varchar(40) ENCODE zstd,
City varchar(28) ENCODE zstd,
State varchar(2) ENCODE bytedict,
ZIP varchar(5) ENCODE zstd,
ZIP4 varchar(4) ENCODE zstd,
AH1_MAILABILITY_SCORE varchar(2) ENCODE zstd,
CARRIER_ROUTE_CODE varchar(4) ENCODE bytedict,
AH1_LOT_NUMBER varchar(5) ENCODE zstd,
AH1_LOT_SORTATION_NUMBER varchar(2) ENCODE bytedict,
DPBC varchar(3) ENCODE zstd,
Email_Address_s varchar(80) ENCODE zstd,
open_flag varchar(1) ENCODE zstd,
open_date_YYYYMM varchar(6) ENCODE zstd,
click_flag varchar(1) ENCODE zstd,
click_date_yyyymm varchar(6) ENCODE zstd,
Vendor_Code varchar(2) ENCODE zstd,
Domain varchar(80) ENCODE zstd,
email_domain varchar(20) ENCODE zstd,
md5_email_lower varchar(32) ENCODE zstd,
md5_email_upper varchar(32) ENCODE zstd,
IHASH varchar(32) ENCODE zstd,
bestdate_yyyymm varchar(6) ENCODE zstd,
individual_mc varchar(17) ENCODE zstd,
company varchar(1) ENCODE zstd,
zipfull varchar(9) ENCODE zstd,
scf varchar(3) ENCODE zstd,
oneperhhld varchar(18) ENCODE zstd,
pres_of_Email_address_flag varchar(1) ENCODE zstd,
COUNTY_CODE varchar(3) ENCODE bytedict,
RES_BUS_INDC varchar(1) ENCODE zstd,
LONGITUDE Varchar(11) ENCODE zstd,
LATITUDE Varchar(11) ENCODE zstd,
NTF_VIN varchar(7) ENCODE zstd,
CAR_NUMBER  varchar(12) ENCODE zstd,
CBSA_CODE  varchar(5) ENCODE zstd,
CBSA_TYPE  varchar(5) ENCODE zstd,
CBSA_NAME  varchar(50) ENCODE zstd,
eor varchar(1) ENCODE zstd,
ID bigint UNIQUE distkey sortkey ENCODE delta,
listid int ENCODE az64,
permissiontype varchar(1) ENCODE zstd,
modelcode varchar(30) ENCODE zstd,
csource varchar(15) ENCODE zstd,
odometer_int int ENCODE zstd,
flatitude float8 ENCODE zstd,
flongitude float8 ENCODE zstd,
georadius varchar(1) ENCODE lzo,
zipradius varchar(1) ENCODE lzo,
hardkey varchar(75) ENCODE zstd,
statecountyname varchar(60) ENCODE zstd,
statecity varchar(44) ENCODE zstd,
statecityzip varchar(49) ENCODE zstd,
statecityscf varchar(47) ENCODE zstd,
statecountycode varchar(5) ENCODE zstd
)
;

insert into {auto_tablename1}
(
  vin,
  shortvin,
  firstname,
  middle_initial,
  lastname,
  gender,
  make,
  model,
  year,
  odometer,
  transaction_date,
  transyyyymm,
  drive_type,
  fuel_type,
  luxnon,
  bodytype,
  domimp,
  vehtype,
  transyear,
  vehrecno,
  lems,
  ce_household_id,
  ce_selected_individual_id,
  sqlmc,
  addressline1,
  addressline2,
  city,
  state,
  zip,
  zip4,
  ah1_mailability_score,
  carrier_route_code,
  ah1_lot_number,
  ah1_lot_sortation_number,
  dpbc,
  email_address_s,
  open_flag,
  open_date_yyyymm,
  click_flag,
  click_date_yyyymm,
  vendor_code,
  DOMAIN,
  email_domain,
  md5_email_lower,
  md5_email_upper,
  ihash,
  bestdate_yyyymm,
  individual_mc,
  company,
  zipfull,
  scf,
  oneperhhld,
  pres_of_email_address_flag,
  county_code,
  res_bus_indc,
  longitude,
  latitude,
  ntf_vin,
  car_number,
  cbsa_code,
  cbsa_type,
  cbsa_name,
  eor,
  id,
  listid,
  permissiontype,
  modelcode,
  csource,
  odometer_int,
  flatitude,
  flongitude,
  georadius,
  zipradius,
  hardkey,
  statecountyname,
  statecity,
  statecityzip,
  statecityscf,
  statecountycode
)
select
a.vin as vin,
a.shortvin as shortvin,
a.firstname as firstname,
a.MIDDLE_INITIAL as middle_initial,
a.lastname as lastname,
a.gender as gender,
REPLACE(REPLACE(LTRIM(RTRIM(a.make)), ' ','_'), '-','_') as make,
a.model as model,
a.year as year,
a.odometer as odometer,
a.transaction_date as transaction_date,
a.transyyyymm as transyyyymm,
a.drive_type as drive_type,
a.fuel_type as fuel_type,
a.luxnon as luxnon,
a.bodytype as bodytype,
a.domimp as domimp,
a.vehtype as vehtype,
a.transyear as transyear,
a.vehrecno as vehrecno,
a.lems as lems,
a.CE_Household_ID as ce_household_id,
a.CE_Selected_Individual_ID as ce_selected_individual_id,
a.SQLMC as sqlmc,
a.AddressLine1 as addressline1,
a.AddressLine2 as addressline2,
a.City as city,
a.State as state,
a.ZIP as zip,
a.ZIP4 as zip4,
a.AH1_MAILABILITY_SCORE as ah1_mailability_score,
a.CARRIER_ROUTE_CODE as carrier_route_code,
a.AH1_LOT_NUMBER as ah1_lot_number,
a.AH1_LOT_SORTATION_NUMBER as ah1_lot_sortation_number,
a.DPBC as dpbc,
a.Email_Address_s as email_address_s,
a.open_flag as open_flag,
a.open_date_YYYYMM as open_date_yyyymm,
a.click_flag as click_flag,
a.click_date_yyyymm as click_date_yyyymm,
a.Vendor_Code as vendor_code,
a.Domain as domain,
a.email_domain as email_domain,
a.md5_email_lower as md5_email_lower,
a.md5_email_upper as md5_email_upper,
a.IHASH as ihash,
a.bestdate_yyyymm as bestdate_yyyymm,
a.individual_mc as individual_mc,
a.company as company,
a.zipfull as zipfull,
a.scf as scf,
a.oneperhhld as oneperhhld,
a.pres_of_Email_address_flag as pres_of_email_address_flag,
a.COUNTY_CODE as county_code,
a.RES_BUS_INDC as res_bus_indc,
a.LONGITUDE as longitude,
a.LATITUDE as latitude,
a.NTF_VIN as ntf_vin,
a.CAR_NUMBER as car_number,
a.CBSA_CODE as cbsa_code,
a.CBSA_TYPE as cbsa_type,
a.CBSA_NAME as cbsa_name,
a.eor as eor,
a.id as id,
12027 as listid,
'R' as permissiontype,
REPLACE(REPLACE(LTRIM(RTRIM(a.Model)), ' ','_'), '-','_') as modelcode,
datepart(year,getdate()) || RIGHT('00' + CAST(DATEPART(mm, getdate()) AS varchar(2)), 2) as csource,
CAST(CASE WHEN (a.odometer is null or a.odometer = '') THEN '0' ELSE a.odometer END as int) as odometer_int,
CAST(case when (a.Latitude is null or a.Latitude = '') then '0' else a.Latitude end as float) as flatitude,
case when (CAST(case when (a.Longitude is null or a.Longitude = '') then '0' else a.Longitude end as float))<0
            then (CAST(case when (a.Longitude is null or a.Longitude = '') then '0' else a.Longitude end as float))* -1
             else (CAST(case when (a.Longitude is null or a.Longitude = '') then '0' else a.Longitude end as float)) end as flongitude,
cast(null as varchar(1)) as georadius,
cast(null as varchar(1)) as zipradius,
REPLACE(a.AddressLine1 + a.CITY + a.STATE + a.ZIP, ' ', '') as hardkey,
CAST('' as varchar(60)) as StateCountyName,
CASE WHEN ((a.STATE + LTRIM(RTRIM(UPPER(a.CITY)))) IS NULL) THEN '' ELSE a.STATE + LTRIM(RTRIM(UPPER(a.CITY)))  END as statecity,
CASE WHEN ((a.STATE + LTRIM(RTRIM(UPPER(a.CITY)))+ LTRIM(RTRIM(a.ZIP))) IS NULL) THEN '' ELSE a.STATE + LTRIM(RTRIM(UPPER(a.CITY)))+ LTRIM(RTRIM(a.ZIP))  END as statecityzip,
CASE WHEN ((a.STATE + LTRIM(RTRIM(UPPER(a.CITY)))+ LTRIM(RTRIM(a.SCF))) IS NULL) THEN '' ELSE  a.STATE + LTRIM(RTRIM(UPPER(a.CITY)))+ LTRIM(RTRIM(a.SCF)) END as statecityscf,
CASE WHEN ((a.STATE + LTRIM(RTRIM(a.County_code))) IS NULL) THEN '' ELSE a.STATE + LTRIM(RTRIM(a.County_code)) END as statecountycode
from {auto_tablename4} as a
;


--create temp table for countyname
DROP TABLE IF EXISTS #tmpCountyCode;
SELECT DISTINCT LTRIM(RTRIM(UPPER(cStateCode))) AS cStateCode , LTRIM(RTRIM(UPPER(cCountycode))) AS cCountycode, LTRIM(RTRIM(UPPER(cCounty))) AS cCounty
INTO #tmpCountyCode
FROM {auto_tablename3};

--update StateCountyName
UPDATE {auto_tablename1} SET
               StateCountyName = CASE WHEN ((a.state + B.cCounty) IS NULL) THEN '' ELSE a.state + B.cCounty END
  FROM {auto_tablename1} a INNER JOIN #tmpCountyCode b ON a.state = b.cStatecode AND a.County_code = b.cCountyCode
;

drop table if exists {auto_tablename4};




